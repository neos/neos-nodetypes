# Menu TS Object - extends Neos.Neos:Menu and is rendering menus inserted as content elements
prototype(Neos.NodeTypes:Menu) {
	@class = 'Neos\\Neos\\Fusion\\MenuImplementation'

	startingPoint = ${q(node).property('startingPoint') ? q(node).property('startingPoint') : documentNode}

	itemCollection = ${Array.isEmpty(q(node).property('selection') ? q(node).property('selection') : {}) ? null : q(node).property('selection')}

	entryLevel = ${q(node).property('startLevel')}
	entryLevel.@process.1 = ${String.toInteger(value)}

	maximumLevels = ${q(node).property('maximumLevels')}
	maximumLevels.@process.1 = ${String.toInteger(value)}

	active.attributes = Neos.Fusion:Attributes {
		class = 'active'
	}
	current.attributes = Neos.Fusion:Attributes {
		class = 'current'
	}
	normal.attributes = Neos.Fusion:Attributes {
		class = 'normal'
	}

	node = ${node}
	items = ${this.items}

	@cache {
		mode = 'cached'
		entryIdentifier {
			documentNode = ${documentNode}
			node = ${node}
		}
		entryTags {
			1 = 'NodeType_Neos.Neos:Document'
			2 = ${'Node_' + node.identifier}
		}
	}
}

# Image TS Object
prototype(Neos.NodeTypes:Image) {
	maximumWidth = 2560
	width = null
	maximumHeight = 2560
	height = null
	imageClassName = ${q(node).property('alignment') ? ('typo3-neos-alignment-' + q(node).property('alignment')) : ''}
	allowCropping = false
	allowUpScaling = false
	link.@process.convertUris = Neos.Neos:ConvertUris {
		forceConversion = true
	}
	title = ${q(node).property('title') ? q(node).property('title') : q(node).property('image').title}
	caption = ${String.trim(String.stripTags(q(node).property('caption'))) ? q(node).property('caption') : q(node).property('image').caption}
}

# TextWithImage TS Object
prototype(Neos.NodeTypes:TextWithImage) < prototype(Neos.NodeTypes:Image)

# Map fusion for backwards compability in external packages
prototype(Neos.NodeTypes:MultiColumn) >
prototype(Neos.NodeTypes:MultiColumn) < prototype(Neos.NodeTypes.ColumnLayouts:MultiColumn) {
  columns.itemRenderer = Neos.NodeTypes:MultiColumnItem
}

# Map fusion for backwards compability in external packages
prototype(Neos.NodeTypes:MultiColumnItem) >
prototype(Neos.NodeTypes:MultiColumnItem) < prototype(Neos.NodeTypes.ColumnLayouts:MultiColumnItem)

# Map node types for backwards compability
prototype(Neos.NodeTypes:TwoColumn) >
prototype(Neos.NodeTypes:TwoColumn) < prototype(Neos.NodeTypes:MultiColumn)

# Map node types for backwards compability
prototype(Neos.NodeTypes:ThreeColumn) >
prototype(Neos.NodeTypes:ThreeColumn) < prototype(Neos.NodeTypes:MultiColumn)

# Map node types for backwards compability
prototype(Neos.NodeTypes:FourColumn) >
prototype(Neos.NodeTypes:FourColumn) < prototype(Neos.NodeTypes:MultiColumn)

# Form TS Object
prototype(Neos.NodeTypes:Form) {
	presetName = 'default'
	@cache {
		mode = 'uncached'
		context {
			1 = 'node'
			2 = 'documentNode'
		}
	}
}

# Map node types for backwards compability
prototype(Neos.NodeTypes:AssetList) {
  templatePath = 'resource://Neos.NodeTypes.AssetList/Private/Templates/NodeTypes/AssetList.html'
}

# Map node types for backwards compability
prototype(Neos.NodeTypes:Html) {
  templatePath = 'resource://Neos.NodeTypes.Html/Private/Templates/NodeTypes/Html.html'
}

# Map node types for backwards compability
prototype(Neos.NodeTypes:ContentReferences) >
prototype(Neos.NodeTypes:ContentReferences) < prototype(Neos.NodeTypes.ContentReferences:ContentReferences)
